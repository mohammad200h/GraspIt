# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graspit_interface/Grasp.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Grasp(genpy.Message):
  _md5sum = "dd74168be3b3320990979febf7f5265d"
  _type = "graspit_interface/Grasp"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# id for the body the grasp was planned on.
int32 graspable_body_id

# pose of the hand with respect to the object 
# the grasp was planned on
geometry_msgs/Pose pose

float64[] dofs

float64 epsilon_quality
float64 volume_quality


# The approach direction to take before picking an object
geometry_msgs/Vector3Stamped approach_direction





================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['graspable_body_id','pose','dofs','epsilon_quality','volume_quality','approach_direction']
  _slot_types = ['int32','geometry_msgs/Pose','float64[]','float64','float64','geometry_msgs/Vector3Stamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       graspable_body_id,pose,dofs,epsilon_quality,volume_quality,approach_direction

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Grasp, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.graspable_body_id is None:
        self.graspable_body_id = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.dofs is None:
        self.dofs = []
      if self.epsilon_quality is None:
        self.epsilon_quality = 0.
      if self.volume_quality is None:
        self.volume_quality = 0.
      if self.approach_direction is None:
        self.approach_direction = geometry_msgs.msg.Vector3Stamped()
    else:
      self.graspable_body_id = 0
      self.pose = geometry_msgs.msg.Pose()
      self.dofs = []
      self.epsilon_quality = 0.
      self.volume_quality = 0.
      self.approach_direction = geometry_msgs.msg.Vector3Stamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i7d().pack(_x.graspable_body_id, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w))
      length = len(self.dofs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.dofs))
      _x = self
      buff.write(_get_struct_2d3I().pack(_x.epsilon_quality, _x.volume_quality, _x.approach_direction.header.seq, _x.approach_direction.header.stamp.secs, _x.approach_direction.header.stamp.nsecs))
      _x = self.approach_direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.approach_direction.vector.x, _x.approach_direction.vector.y, _x.approach_direction.vector.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.approach_direction is None:
        self.approach_direction = geometry_msgs.msg.Vector3Stamped()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.graspable_body_id, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w,) = _get_struct_i7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.dofs = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 28
      (_x.epsilon_quality, _x.volume_quality, _x.approach_direction.header.seq, _x.approach_direction.header.stamp.secs, _x.approach_direction.header.stamp.nsecs,) = _get_struct_2d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.approach_direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.approach_direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.approach_direction.vector.x, _x.approach_direction.vector.y, _x.approach_direction.vector.z,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i7d().pack(_x.graspable_body_id, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w))
      length = len(self.dofs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.dofs.tostring())
      _x = self
      buff.write(_get_struct_2d3I().pack(_x.epsilon_quality, _x.volume_quality, _x.approach_direction.header.seq, _x.approach_direction.header.stamp.secs, _x.approach_direction.header.stamp.nsecs))
      _x = self.approach_direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d().pack(_x.approach_direction.vector.x, _x.approach_direction.vector.y, _x.approach_direction.vector.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.approach_direction is None:
        self.approach_direction = geometry_msgs.msg.Vector3Stamped()
      end = 0
      _x = self
      start = end
      end += 60
      (_x.graspable_body_id, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w,) = _get_struct_i7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.dofs = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 28
      (_x.epsilon_quality, _x.volume_quality, _x.approach_direction.header.seq, _x.approach_direction.header.stamp.secs, _x.approach_direction.header.stamp.nsecs,) = _get_struct_2d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.approach_direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.approach_direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.approach_direction.vector.x, _x.approach_direction.vector.y, _x.approach_direction.vector.z,) = _get_struct_3d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d3I = None
def _get_struct_2d3I():
    global _struct_2d3I
    if _struct_2d3I is None:
        _struct_2d3I = struct.Struct("<2d3I")
    return _struct_2d3I
_struct_i7d = None
def _get_struct_i7d():
    global _struct_i7d
    if _struct_i7d is None:
        _struct_i7d = struct.Struct("<i7d")
    return _struct_i7d
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
