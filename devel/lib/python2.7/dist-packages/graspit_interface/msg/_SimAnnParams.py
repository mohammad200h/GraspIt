# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graspit_interface/SimAnnParams.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SimAnnParams(genpy.Message):
  _md5sum = "f8aaad6aea614225c4b96a7800e09124"
  _type = "graspit_interface/SimAnnParams"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
# flag to switch to custom params defined in this message. If not set, GraspIt's default settings are kept
bool set_custom_params


# //Annealing parameters
# //! Annealing constant for neighbor generation schedule
float64 YC	 	#	GraspIt! default: 7.0
# //! Annealing constant for error acceptance schedule
float64 HC	 	#	GraspIt! default: 7.0
# //! Number of dimensions for neighbor generation schedule
float64 YDIMS	#	GraspIt! default: 8.0
# //! Number of dimensions for error acceptance schedule
float64 HDIMS	#	GraspIt! default: 8.0
# //! Adjust factor for neighbor generation schedule
float64 NBR_ADJ	#	GraspIt! default: 1.0
# //! Adjust raw errors reported by states to be in the relevant range of the annealing schedule
float64 ERR_ADJ	#	GraspIt! default: 1.0e-6
# //! Starting temperatue
float64 DEF_T0	#	GraspIt! default: 1e6
# //! Starting step
float64 DEF_K0	#	GraspIt! default: 30000"""
  __slots__ = ['set_custom_params','YC','HC','YDIMS','HDIMS','NBR_ADJ','ERR_ADJ','DEF_T0','DEF_K0']
  _slot_types = ['bool','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       set_custom_params,YC,HC,YDIMS,HDIMS,NBR_ADJ,ERR_ADJ,DEF_T0,DEF_K0

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimAnnParams, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.set_custom_params is None:
        self.set_custom_params = False
      if self.YC is None:
        self.YC = 0.
      if self.HC is None:
        self.HC = 0.
      if self.YDIMS is None:
        self.YDIMS = 0.
      if self.HDIMS is None:
        self.HDIMS = 0.
      if self.NBR_ADJ is None:
        self.NBR_ADJ = 0.
      if self.ERR_ADJ is None:
        self.ERR_ADJ = 0.
      if self.DEF_T0 is None:
        self.DEF_T0 = 0.
      if self.DEF_K0 is None:
        self.DEF_K0 = 0.
    else:
      self.set_custom_params = False
      self.YC = 0.
      self.HC = 0.
      self.YDIMS = 0.
      self.HDIMS = 0.
      self.NBR_ADJ = 0.
      self.ERR_ADJ = 0.
      self.DEF_T0 = 0.
      self.DEF_K0 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B8d().pack(_x.set_custom_params, _x.YC, _x.HC, _x.YDIMS, _x.HDIMS, _x.NBR_ADJ, _x.ERR_ADJ, _x.DEF_T0, _x.DEF_K0))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.set_custom_params, _x.YC, _x.HC, _x.YDIMS, _x.HDIMS, _x.NBR_ADJ, _x.ERR_ADJ, _x.DEF_T0, _x.DEF_K0,) = _get_struct_B8d().unpack(str[start:end])
      self.set_custom_params = bool(self.set_custom_params)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B8d().pack(_x.set_custom_params, _x.YC, _x.HC, _x.YDIMS, _x.HDIMS, _x.NBR_ADJ, _x.ERR_ADJ, _x.DEF_T0, _x.DEF_K0))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.set_custom_params, _x.YC, _x.HC, _x.YDIMS, _x.HDIMS, _x.NBR_ADJ, _x.ERR_ADJ, _x.DEF_T0, _x.DEF_K0,) = _get_struct_B8d().unpack(str[start:end])
      self.set_custom_params = bool(self.set_custom_params)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B8d = None
def _get_struct_B8d():
    global _struct_B8d
    if _struct_B8d is None:
        _struct_B8d = struct.Struct("<B8d")
    return _struct_B8d
