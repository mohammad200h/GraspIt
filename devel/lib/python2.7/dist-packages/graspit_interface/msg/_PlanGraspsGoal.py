# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graspit_interface/PlanGraspsGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import graspit_interface.msg

class PlanGraspsGoal(genpy.Message):
  _md5sum = "18f1b3ccd1d8b357cb312d3a46fdb7ac"
  _type = "graspit_interface/PlanGraspsGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal
int32 graspable_body_id

Planner planner
string search_energy
SearchSpace search_space
SearchContact search_contact
SimAnnParams sim_ann_params

int32 max_steps
int32 feedback_num_steps

================================================================================
MSG: graspit_interface/Planner
uint8 SIM_ANN                      = 0
uint8 MULTI_THREADED               = 1

uint8 type
================================================================================
MSG: graspit_interface/SearchSpace
uint8 SPACE_AXIS_ANGLE    = 0
uint8 SPACE_COMPLETE      = 1
uint8 SPACE_ELLIPSOID     = 2
uint8 SPACE_APPROACH      = 3

uint8 type
================================================================================
MSG: graspit_interface/SearchContact
uint8 CONTACT_PRESET    = 0
uint8 CONTACT_LIVE      = 1

uint8 type	
================================================================================
MSG: graspit_interface/SimAnnParams

# flag to switch to custom params defined in this message. If not set, GraspIt's default settings are kept
bool set_custom_params


# //Annealing parameters
# //! Annealing constant for neighbor generation schedule
float64 YC	 	#	GraspIt! default: 7.0
# //! Annealing constant for error acceptance schedule
float64 HC	 	#	GraspIt! default: 7.0
# //! Number of dimensions for neighbor generation schedule
float64 YDIMS	#	GraspIt! default: 8.0
# //! Number of dimensions for error acceptance schedule
float64 HDIMS	#	GraspIt! default: 8.0
# //! Adjust factor for neighbor generation schedule
float64 NBR_ADJ	#	GraspIt! default: 1.0
# //! Adjust raw errors reported by states to be in the relevant range of the annealing schedule
float64 ERR_ADJ	#	GraspIt! default: 1.0e-6
# //! Starting temperatue
float64 DEF_T0	#	GraspIt! default: 1e6
# //! Starting step
float64 DEF_K0	#	GraspIt! default: 30000"""
  __slots__ = ['graspable_body_id','planner','search_energy','search_space','search_contact','sim_ann_params','max_steps','feedback_num_steps']
  _slot_types = ['int32','graspit_interface/Planner','string','graspit_interface/SearchSpace','graspit_interface/SearchContact','graspit_interface/SimAnnParams','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       graspable_body_id,planner,search_energy,search_space,search_contact,sim_ann_params,max_steps,feedback_num_steps

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanGraspsGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.graspable_body_id is None:
        self.graspable_body_id = 0
      if self.planner is None:
        self.planner = graspit_interface.msg.Planner()
      if self.search_energy is None:
        self.search_energy = ''
      if self.search_space is None:
        self.search_space = graspit_interface.msg.SearchSpace()
      if self.search_contact is None:
        self.search_contact = graspit_interface.msg.SearchContact()
      if self.sim_ann_params is None:
        self.sim_ann_params = graspit_interface.msg.SimAnnParams()
      if self.max_steps is None:
        self.max_steps = 0
      if self.feedback_num_steps is None:
        self.feedback_num_steps = 0
    else:
      self.graspable_body_id = 0
      self.planner = graspit_interface.msg.Planner()
      self.search_energy = ''
      self.search_space = graspit_interface.msg.SearchSpace()
      self.search_contact = graspit_interface.msg.SearchContact()
      self.sim_ann_params = graspit_interface.msg.SimAnnParams()
      self.max_steps = 0
      self.feedback_num_steps = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iB().pack(_x.graspable_body_id, _x.planner.type))
      _x = self.search_energy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B8d2i().pack(_x.search_space.type, _x.search_contact.type, _x.sim_ann_params.set_custom_params, _x.sim_ann_params.YC, _x.sim_ann_params.HC, _x.sim_ann_params.YDIMS, _x.sim_ann_params.HDIMS, _x.sim_ann_params.NBR_ADJ, _x.sim_ann_params.ERR_ADJ, _x.sim_ann_params.DEF_T0, _x.sim_ann_params.DEF_K0, _x.max_steps, _x.feedback_num_steps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.planner is None:
        self.planner = graspit_interface.msg.Planner()
      if self.search_space is None:
        self.search_space = graspit_interface.msg.SearchSpace()
      if self.search_contact is None:
        self.search_contact = graspit_interface.msg.SearchContact()
      if self.sim_ann_params is None:
        self.sim_ann_params = graspit_interface.msg.SimAnnParams()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.graspable_body_id, _x.planner.type,) = _get_struct_iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.search_energy = str[start:end].decode('utf-8')
      else:
        self.search_energy = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.search_space.type, _x.search_contact.type, _x.sim_ann_params.set_custom_params, _x.sim_ann_params.YC, _x.sim_ann_params.HC, _x.sim_ann_params.YDIMS, _x.sim_ann_params.HDIMS, _x.sim_ann_params.NBR_ADJ, _x.sim_ann_params.ERR_ADJ, _x.sim_ann_params.DEF_T0, _x.sim_ann_params.DEF_K0, _x.max_steps, _x.feedback_num_steps,) = _get_struct_3B8d2i().unpack(str[start:end])
      self.sim_ann_params.set_custom_params = bool(self.sim_ann_params.set_custom_params)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iB().pack(_x.graspable_body_id, _x.planner.type))
      _x = self.search_energy
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3B8d2i().pack(_x.search_space.type, _x.search_contact.type, _x.sim_ann_params.set_custom_params, _x.sim_ann_params.YC, _x.sim_ann_params.HC, _x.sim_ann_params.YDIMS, _x.sim_ann_params.HDIMS, _x.sim_ann_params.NBR_ADJ, _x.sim_ann_params.ERR_ADJ, _x.sim_ann_params.DEF_T0, _x.sim_ann_params.DEF_K0, _x.max_steps, _x.feedback_num_steps))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.planner is None:
        self.planner = graspit_interface.msg.Planner()
      if self.search_space is None:
        self.search_space = graspit_interface.msg.SearchSpace()
      if self.search_contact is None:
        self.search_contact = graspit_interface.msg.SearchContact()
      if self.sim_ann_params is None:
        self.sim_ann_params = graspit_interface.msg.SimAnnParams()
      end = 0
      _x = self
      start = end
      end += 5
      (_x.graspable_body_id, _x.planner.type,) = _get_struct_iB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.search_energy = str[start:end].decode('utf-8')
      else:
        self.search_energy = str[start:end]
      _x = self
      start = end
      end += 75
      (_x.search_space.type, _x.search_contact.type, _x.sim_ann_params.set_custom_params, _x.sim_ann_params.YC, _x.sim_ann_params.HC, _x.sim_ann_params.YDIMS, _x.sim_ann_params.HDIMS, _x.sim_ann_params.NBR_ADJ, _x.sim_ann_params.ERR_ADJ, _x.sim_ann_params.DEF_T0, _x.sim_ann_params.DEF_K0, _x.max_steps, _x.feedback_num_steps,) = _get_struct_3B8d2i().unpack(str[start:end])
      self.sim_ann_params.set_custom_params = bool(self.sim_ann_params.set_custom_params)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B8d2i = None
def _get_struct_3B8d2i():
    global _struct_3B8d2i
    if _struct_3B8d2i is None:
        _struct_3B8d2i = struct.Struct("<3B8d2i")
    return _struct_3B8d2i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
