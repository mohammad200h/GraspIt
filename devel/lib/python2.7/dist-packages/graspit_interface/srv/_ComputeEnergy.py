# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graspit_interface/ComputeEnergyRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ComputeEnergyRequest(genpy.Message):
  _md5sum = "cb46c20ab640f48b80f1b964f23ef424"
  _type = "graspit_interface/ComputeEnergyRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 handId
uint32 graspableBodyId
string energyType

"""
  __slots__ = ['handId','graspableBodyId','energyType']
  _slot_types = ['uint32','uint32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       handId,graspableBodyId,energyType

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ComputeEnergyRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.handId is None:
        self.handId = 0
      if self.graspableBodyId is None:
        self.graspableBodyId = 0
      if self.energyType is None:
        self.energyType = ''
    else:
      self.handId = 0
      self.graspableBodyId = 0
      self.energyType = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.handId, _x.graspableBodyId))
      _x = self.energyType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.handId, _x.graspableBodyId,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.energyType = str[start:end].decode('utf-8')
      else:
        self.energyType = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.handId, _x.graspableBodyId))
      _x = self.energyType
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.handId, _x.graspableBodyId,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.energyType = str[start:end].decode('utf-8')
      else:
        self.energyType = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from graspit_interface/ComputeEnergyResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ComputeEnergyResponse(genpy.Message):
  _md5sum = "c46ac3241ac31892d8f1979f6ace57b1"
  _type = "graspit_interface/ComputeEnergyResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 RESULT_SUCCESS    = 0
uint8 RESULT_INVALID_HAND_ID = 1
uint8 RESULT_INVALID_BODY_ID  = 2
uint8 RESULT_INVALID_ENERGY_TYPE = 3

uint8 result

float64 energy
bool isLegal

"""
  # Pseudo-constants
  RESULT_SUCCESS = 0
  RESULT_INVALID_HAND_ID = 1
  RESULT_INVALID_BODY_ID = 2
  RESULT_INVALID_ENERGY_TYPE = 3

  __slots__ = ['result','energy','isLegal']
  _slot_types = ['uint8','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,energy,isLegal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ComputeEnergyResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
      if self.energy is None:
        self.energy = 0.
      if self.isLegal is None:
        self.isLegal = False
    else:
      self.result = 0
      self.energy = 0.
      self.isLegal = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BdB().pack(_x.result, _x.energy, _x.isLegal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.result, _x.energy, _x.isLegal,) = _get_struct_BdB().unpack(str[start:end])
      self.isLegal = bool(self.isLegal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BdB().pack(_x.result, _x.energy, _x.isLegal))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.result, _x.energy, _x.isLegal,) = _get_struct_BdB().unpack(str[start:end])
      self.isLegal = bool(self.isLegal)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_BdB = None
def _get_struct_BdB():
    global _struct_BdB
    if _struct_BdB is None:
        _struct_BdB = struct.Struct("<BdB")
    return _struct_BdB
class ComputeEnergy(object):
  _type          = 'graspit_interface/ComputeEnergy'
  _md5sum = 'dfcebf964a22ec5ff63ce7a982066d70'
  _request_class  = ComputeEnergyRequest
  _response_class = ComputeEnergyResponse
