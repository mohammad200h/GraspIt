# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from grasp_planning_graspit_msgs/AddToDatabaseRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AddToDatabaseRequest(genpy.Message):
  _md5sum = "5ab6c9f30acc0ca8b3199d205c07915a"
  _type = "grasp_planning_graspit_msgs/AddToDatabaseRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """







string filename


bool isRobot



bool asGraspable




string modelName



string[] jointNames

"""
  __slots__ = ['filename','isRobot','asGraspable','modelName','jointNames']
  _slot_types = ['string','bool','bool','string','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       filename,isRobot,asGraspable,modelName,jointNames

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AddToDatabaseRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.filename is None:
        self.filename = ''
      if self.isRobot is None:
        self.isRobot = False
      if self.asGraspable is None:
        self.asGraspable = False
      if self.modelName is None:
        self.modelName = ''
      if self.jointNames is None:
        self.jointNames = []
    else:
      self.filename = ''
      self.isRobot = False
      self.asGraspable = False
      self.modelName = ''
      self.jointNames = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.isRobot, _x.asGraspable))
      _x = self.modelName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.jointNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.jointNames:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filename = str[start:end].decode('utf-8')
      else:
        self.filename = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.isRobot, _x.asGraspable,) = _get_struct_2B().unpack(str[start:end])
      self.isRobot = bool(self.isRobot)
      self.asGraspable = bool(self.asGraspable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.modelName = str[start:end].decode('utf-8')
      else:
        self.modelName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jointNames = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.jointNames.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.filename
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.isRobot, _x.asGraspable))
      _x = self.modelName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.jointNames)
      buff.write(_struct_I.pack(length))
      for val1 in self.jointNames:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.filename = str[start:end].decode('utf-8')
      else:
        self.filename = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.isRobot, _x.asGraspable,) = _get_struct_2B().unpack(str[start:end])
      self.isRobot = bool(self.isRobot)
      self.asGraspable = bool(self.asGraspable)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.modelName = str[start:end].decode('utf-8')
      else:
        self.modelName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.jointNames = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.jointNames.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from grasp_planning_graspit_msgs/AddToDatabaseResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AddToDatabaseResponse(genpy.Message):
  _md5sum = "fce6766e0f7863d40768bb95aba1132d"
  _type = "grasp_planning_graspit_msgs/AddToDatabaseResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """


int32 returnCode



int32 modelID





int32 SUCCESS = 0


int32 MODEL_EXISTS = 1


int32 FILE_NOT_FOUND = 2


int32 NOT_READY = 3


int32 NO_NAME = 4


int32 OTHER_ERROR = 5









"""
  # Pseudo-constants
  SUCCESS = 0
  MODEL_EXISTS = 1
  FILE_NOT_FOUND = 2
  NOT_READY = 3
  NO_NAME = 4
  OTHER_ERROR = 5

  __slots__ = ['returnCode','modelID']
  _slot_types = ['int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       returnCode,modelID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AddToDatabaseResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.returnCode is None:
        self.returnCode = 0
      if self.modelID is None:
        self.modelID = 0
    else:
      self.returnCode = 0
      self.modelID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.returnCode, _x.modelID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.returnCode, _x.modelID,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i().pack(_x.returnCode, _x.modelID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.returnCode, _x.modelID,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
class AddToDatabase(object):
  _type          = 'grasp_planning_graspit_msgs/AddToDatabase'
  _md5sum = '1d861bc118bc160b1e8a75f648c6112e'
  _request_class  = AddToDatabaseRequest
  _response_class = AddToDatabaseResponse
