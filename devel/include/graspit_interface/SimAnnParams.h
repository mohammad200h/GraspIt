// Generated by gencpp from file graspit_interface/SimAnnParams.msg
// DO NOT EDIT!


#ifndef GRASPIT_INTERFACE_MESSAGE_SIMANNPARAMS_H
#define GRASPIT_INTERFACE_MESSAGE_SIMANNPARAMS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graspit_interface
{
template <class ContainerAllocator>
struct SimAnnParams_
{
  typedef SimAnnParams_<ContainerAllocator> Type;

  SimAnnParams_()
    : set_custom_params(false)
    , YC(0.0)
    , HC(0.0)
    , YDIMS(0.0)
    , HDIMS(0.0)
    , NBR_ADJ(0.0)
    , ERR_ADJ(0.0)
    , DEF_T0(0.0)
    , DEF_K0(0.0)  {
    }
  SimAnnParams_(const ContainerAllocator& _alloc)
    : set_custom_params(false)
    , YC(0.0)
    , HC(0.0)
    , YDIMS(0.0)
    , HDIMS(0.0)
    , NBR_ADJ(0.0)
    , ERR_ADJ(0.0)
    , DEF_T0(0.0)
    , DEF_K0(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _set_custom_params_type;
  _set_custom_params_type set_custom_params;

   typedef double _YC_type;
  _YC_type YC;

   typedef double _HC_type;
  _HC_type HC;

   typedef double _YDIMS_type;
  _YDIMS_type YDIMS;

   typedef double _HDIMS_type;
  _HDIMS_type HDIMS;

   typedef double _NBR_ADJ_type;
  _NBR_ADJ_type NBR_ADJ;

   typedef double _ERR_ADJ_type;
  _ERR_ADJ_type ERR_ADJ;

   typedef double _DEF_T0_type;
  _DEF_T0_type DEF_T0;

   typedef double _DEF_K0_type;
  _DEF_K0_type DEF_K0;





  typedef boost::shared_ptr< ::graspit_interface::SimAnnParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graspit_interface::SimAnnParams_<ContainerAllocator> const> ConstPtr;

}; // struct SimAnnParams_

typedef ::graspit_interface::SimAnnParams_<std::allocator<void> > SimAnnParams;

typedef boost::shared_ptr< ::graspit_interface::SimAnnParams > SimAnnParamsPtr;
typedef boost::shared_ptr< ::graspit_interface::SimAnnParams const> SimAnnParamsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graspit_interface::SimAnnParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graspit_interface::SimAnnParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace graspit_interface

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'graspit_interface': ['/home/mamad/Graspit/src/graspit_interface/msg', '/home/mamad/Graspit/devel/share/graspit_interface/msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::SimAnnParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graspit_interface::SimAnnParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::SimAnnParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graspit_interface::SimAnnParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::SimAnnParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graspit_interface::SimAnnParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graspit_interface::SimAnnParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8aaad6aea614225c4b96a7800e09124";
  }

  static const char* value(const ::graspit_interface::SimAnnParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8aaad6aea614225ULL;
  static const uint64_t static_value2 = 0xc4b96a7800e09124ULL;
};

template<class ContainerAllocator>
struct DataType< ::graspit_interface::SimAnnParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graspit_interface/SimAnnParams";
  }

  static const char* value(const ::graspit_interface::SimAnnParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graspit_interface::SimAnnParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
# flag to switch to custom params defined in this message. If not set, GraspIt's default settings are kept\n\
bool set_custom_params\n\
\n\
\n\
# //Annealing parameters\n\
# //! Annealing constant for neighbor generation schedule\n\
float64 YC	 	#	GraspIt! default: 7.0\n\
# //! Annealing constant for error acceptance schedule\n\
float64 HC	 	#	GraspIt! default: 7.0\n\
# //! Number of dimensions for neighbor generation schedule\n\
float64 YDIMS	#	GraspIt! default: 8.0\n\
# //! Number of dimensions for error acceptance schedule\n\
float64 HDIMS	#	GraspIt! default: 8.0\n\
# //! Adjust factor for neighbor generation schedule\n\
float64 NBR_ADJ	#	GraspIt! default: 1.0\n\
# //! Adjust raw errors reported by states to be in the relevant range of the annealing schedule\n\
float64 ERR_ADJ	#	GraspIt! default: 1.0e-6\n\
# //! Starting temperatue\n\
float64 DEF_T0	#	GraspIt! default: 1e6\n\
# //! Starting step\n\
float64 DEF_K0	#	GraspIt! default: 30000\n\
";
  }

  static const char* value(const ::graspit_interface::SimAnnParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graspit_interface::SimAnnParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.set_custom_params);
      stream.next(m.YC);
      stream.next(m.HC);
      stream.next(m.YDIMS);
      stream.next(m.HDIMS);
      stream.next(m.NBR_ADJ);
      stream.next(m.ERR_ADJ);
      stream.next(m.DEF_T0);
      stream.next(m.DEF_K0);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SimAnnParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graspit_interface::SimAnnParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graspit_interface::SimAnnParams_<ContainerAllocator>& v)
  {
    s << indent << "set_custom_params: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_custom_params);
    s << indent << "YC: ";
    Printer<double>::stream(s, indent + "  ", v.YC);
    s << indent << "HC: ";
    Printer<double>::stream(s, indent + "  ", v.HC);
    s << indent << "YDIMS: ";
    Printer<double>::stream(s, indent + "  ", v.YDIMS);
    s << indent << "HDIMS: ";
    Printer<double>::stream(s, indent + "  ", v.HDIMS);
    s << indent << "NBR_ADJ: ";
    Printer<double>::stream(s, indent + "  ", v.NBR_ADJ);
    s << indent << "ERR_ADJ: ";
    Printer<double>::stream(s, indent + "  ", v.ERR_ADJ);
    s << indent << "DEF_T0: ";
    Printer<double>::stream(s, indent + "  ", v.DEF_T0);
    s << indent << "DEF_K0: ";
    Printer<double>::stream(s, indent + "  ", v.DEF_K0);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASPIT_INTERFACE_MESSAGE_SIMANNPARAMS_H
