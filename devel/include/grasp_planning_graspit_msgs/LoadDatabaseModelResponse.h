// Generated by gencpp from file grasp_planning_graspit_msgs/LoadDatabaseModelResponse.msg
// DO NOT EDIT!


#ifndef GRASP_PLANNING_GRASPIT_MSGS_MESSAGE_LOADDATABASEMODELRESPONSE_H
#define GRASP_PLANNING_GRASPIT_MSGS_MESSAGE_LOADDATABASEMODELRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grasp_planning_graspit_msgs
{
template <class ContainerAllocator>
struct LoadDatabaseModelResponse_
{
  typedef LoadDatabaseModelResponse_<ContainerAllocator> Type;

  LoadDatabaseModelResponse_()
    : result(0)  {
    }
  LoadDatabaseModelResponse_(const ContainerAllocator& _alloc)
    : result(0)  {
  (void)_alloc;
    }



   typedef int32_t _result_type;
  _result_type result;



  enum {
    LOAD_SUCCESS = 0,
    LOAD_FAILURE = 1,
  };


  typedef boost::shared_ptr< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> const> ConstPtr;

}; // struct LoadDatabaseModelResponse_

typedef ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<std::allocator<void> > LoadDatabaseModelResponse;

typedef boost::shared_ptr< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse > LoadDatabaseModelResponsePtr;
typedef boost::shared_ptr< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse const> LoadDatabaseModelResponseConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace grasp_planning_graspit_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "41e017e2964af6197c0f07ec9353afaf";
  }

  static const char* value(const ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x41e017e2964af619ULL;
  static const uint64_t static_value2 = 0x7c0f07ec9353afafULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_planning_graspit_msgs/LoadDatabaseModelResponse";
  }

  static const char* value(const ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int32 LOAD_SUCCESS = 0\n\
int32 LOAD_FAILURE = 1\n\
int32 result\n\
";
  }

  static const char* value(const ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LoadDatabaseModelResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_planning_graspit_msgs::LoadDatabaseModelResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_PLANNING_GRASPIT_MSGS_MESSAGE_LOADDATABASEMODELRESPONSE_H
