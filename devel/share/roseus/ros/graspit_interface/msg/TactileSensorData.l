;; Auto-generated. Do not edit!


(when (boundp 'graspit_interface::TactileSensorData)
  (if (not (find-package "GRASPIT_INTERFACE"))
    (make-package "GRASPIT_INTERFACE"))
  (shadow 'TactileSensorData (find-package "GRASPIT_INTERFACE")))
(unless (find-package "GRASPIT_INTERFACE::TACTILESENSORDATA")
  (make-package "GRASPIT_INTERFACE::TACTILESENSORDATA"))

(in-package "ROS")
;;//! \htmlinclude TactileSensorData.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))
(if (not (find-package "STD_MSGS"))
  (ros::roseus-add-msgs "std_msgs"))


(defclass graspit_interface::TactileSensorData
  :super ros::object
  :slots (_header _sensor_poses _sensor_forces ))

(defmethod graspit_interface::TactileSensorData
  (:init
   (&key
    ((:header __header) (instance std_msgs::Header :init))
    ((:sensor_poses __sensor_poses) (let (r) (dotimes (i 0) (push (instance geometry_msgs::PoseStamped :init) r)) r))
    ((:sensor_forces __sensor_forces) (make-array 0 :initial-element 0.0 :element-type :float))
    )
   (send-super :init)
   (setq _header __header)
   (setq _sensor_poses __sensor_poses)
   (setq _sensor_forces __sensor_forces)
   self)
  (:header
   (&rest __header)
   (if (keywordp (car __header))
       (send* _header __header)
     (progn
       (if __header (setq _header (car __header)))
       _header)))
  (:sensor_poses
   (&rest __sensor_poses)
   (if (keywordp (car __sensor_poses))
       (send* _sensor_poses __sensor_poses)
     (progn
       (if __sensor_poses (setq _sensor_poses (car __sensor_poses)))
       _sensor_poses)))
  (:sensor_forces
   (&optional __sensor_forces)
   (if __sensor_forces (setq _sensor_forces __sensor_forces)) _sensor_forces)
  (:serialization-length
   ()
   (+
    ;; std_msgs/Header _header
    (send _header :serialization-length)
    ;; geometry_msgs/PoseStamped[] _sensor_poses
    (apply #'+ (send-all _sensor_poses :serialization-length)) 4
    ;; float64[] _sensor_forces
    (* 8    (length _sensor_forces)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; std_msgs/Header _header
       (send _header :serialize s)
     ;; geometry_msgs/PoseStamped[] _sensor_poses
     (write-long (length _sensor_poses) s)
     (dolist (elem _sensor_poses)
       (send elem :serialize s)
       )
     ;; float64[] _sensor_forces
     (write-long (length _sensor_forces) s)
     (dotimes (i (length _sensor_forces))
       (sys::poke (elt _sensor_forces i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; std_msgs/Header _header
     (send _header :deserialize buf ptr-) (incf ptr- (send _header :serialization-length))
   ;; geometry_msgs/PoseStamped[] _sensor_poses
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _sensor_poses (let (r) (dotimes (i n) (push (instance geometry_msgs::PoseStamped :init) r)) r))
     (dolist (elem- _sensor_poses)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; float64[] _sensor_forces
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _sensor_forces (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _sensor_forces i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;;
   self)
  )

(setf (get graspit_interface::TactileSensorData :md5sum-) "d8b9e263562c22cdc89622a214c2dd89")
(setf (get graspit_interface::TactileSensorData :datatype-) "graspit_interface/TactileSensorData")
(setf (get graspit_interface::TactileSensorData :definition-)
      "std_msgs/Header header
geometry_msgs/PoseStamped[] sensor_poses
float64[] sensor_forces

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :graspit_interface/TactileSensorData "d8b9e263562c22cdc89622a214c2dd89")


