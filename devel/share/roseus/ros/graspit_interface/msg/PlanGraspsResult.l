;; Auto-generated. Do not edit!


(when (boundp 'graspit_interface::PlanGraspsResult)
  (if (not (find-package "GRASPIT_INTERFACE"))
    (make-package "GRASPIT_INTERFACE"))
  (shadow 'PlanGraspsResult (find-package "GRASPIT_INTERFACE")))
(unless (find-package "GRASPIT_INTERFACE::PLANGRASPSRESULT")
  (make-package "GRASPIT_INTERFACE::PLANGRASPSRESULT"))

(in-package "ROS")
;;//! \htmlinclude PlanGraspsResult.msg.html


(defclass graspit_interface::PlanGraspsResult
  :super ros::object
  :slots (_grasps _energies _search_energy ))

(defmethod graspit_interface::PlanGraspsResult
  (:init
   (&key
    ((:grasps __grasps) (let (r) (dotimes (i 0) (push (instance graspit_interface::Grasp :init) r)) r))
    ((:energies __energies) (make-array 0 :initial-element 0.0 :element-type :float))
    ((:search_energy __search_energy) "")
    )
   (send-super :init)
   (setq _grasps __grasps)
   (setq _energies __energies)
   (setq _search_energy (string __search_energy))
   self)
  (:grasps
   (&rest __grasps)
   (if (keywordp (car __grasps))
       (send* _grasps __grasps)
     (progn
       (if __grasps (setq _grasps (car __grasps)))
       _grasps)))
  (:energies
   (&optional __energies)
   (if __energies (setq _energies __energies)) _energies)
  (:search_energy
   (&optional __search_energy)
   (if __search_energy (setq _search_energy __search_energy)) _search_energy)
  (:serialization-length
   ()
   (+
    ;; graspit_interface/Grasp[] _grasps
    (apply #'+ (send-all _grasps :serialization-length)) 4
    ;; float64[] _energies
    (* 8    (length _energies)) 4
    ;; string _search_energy
    4 (length _search_energy)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; graspit_interface/Grasp[] _grasps
     (write-long (length _grasps) s)
     (dolist (elem _grasps)
       (send elem :serialize s)
       )
     ;; float64[] _energies
     (write-long (length _energies) s)
     (dotimes (i (length _energies))
       (sys::poke (elt _energies i) (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
       )
     ;; string _search_energy
       (write-long (length _search_energy) s) (princ _search_energy s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; graspit_interface/Grasp[] _grasps
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _grasps (let (r) (dotimes (i n) (push (instance graspit_interface::Grasp :init) r)) r))
     (dolist (elem- _grasps)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;; float64[] _energies
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _energies (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _energies i) (sys::peek buf ptr- :double)) (incf ptr- 8)
     ))
   ;; string _search_energy
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _search_energy (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;;
   self)
  )

(setf (get graspit_interface::PlanGraspsResult :md5sum-) "0a1077cfe47bddbdc065b3d4b564b0a1")
(setf (get graspit_interface::PlanGraspsResult :datatype-) "graspit_interface/PlanGraspsResult")
(setf (get graspit_interface::PlanGraspsResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Result
Grasp[] grasps
float64[] energies
string search_energy

================================================================================
MSG: graspit_interface/Grasp
# id for the body the grasp was planned on.
int32 graspable_body_id

# pose of the hand with respect to the object 
# the grasp was planned on
geometry_msgs/Pose pose

float64[] dofs

float64 epsilon_quality
float64 volume_quality


# The approach direction to take before picking an object
geometry_msgs/Vector3Stamped approach_direction





================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
")



(provide :graspit_interface/PlanGraspsResult "0a1077cfe47bddbdc065b3d4b564b0a1")


